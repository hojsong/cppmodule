cpp 09
모듈 특별규칙
각 exercise를 해결하는데 STL 컨테이너의 사용이 필수적입니다.
어떤 컨테이너가 쓰였다면, 그 컨테이너는 다른 모듈에서 사용할 수 없습니다.
Exercise를 하기 전에 전체적으로 subject를 읽는게 좋을겁니다.
두개의 컨테이너를 사용하는 EX02를 제외한 각 exercise에서 최소한 하나의 컨테이너를 사용해야 합니다.
EX00 : 비트코인 교환
제출 파일 : Makefile, main.cpp, BitcoinExchange.{cpp, hpp}
당신은 특정 일자에 특정 양의 비트코인의 값을 출력하는 프로그램을 작성해야 합니다.
이 프로그램은 시간당 비트코인 가격을 나타내는 csv 형식의 데이터베이스를 사용해야 합니다.
데이터베이스는 문제와 함께 제공됩니다.
프로그램은 두번째 데이터베이스를 입력으로 받아, 평가하기 위해 다른 가격과 날짜를 저장합니다.
당신의 프로그램은 세가지 규칙을 지켜야 합니다:
프로그램 이름은 btc
파일명을 인자로 받음
파일의 각 줄은 다음 형식을 따름 : “date | value”
유효한 날짜는 항상 다음 형식을 따름 : YEAR-MONTH-DAY
유효한 값은 0에서 1000 사이의 양의 float 혹은 integer
이 과제에서 최소한 하나의 컨테이너를 사용해야 합니다. 가능한 에러를 적절한 예외처리 해줘야 합니다.
아래는 input.txt의 예시입니다.
$> head input.txt
date | value
2011-01-03 | 3
2011-01-03 | 2
2011-01-03 | 1
2011-01-03 | 1.2
2011-01-09 | 1
2012-01-11 | -1
2001-42-42
2012-01-11 | 1
2012-01-11 | 2147483648
$>
당신의 프로그램은 input.txt 파일의 값들을 사용합니다.
당신의 프로그램은 표준출력에 데이터베이스에 나온 환전율을 곱한 값의 결과를 표기해야 합니다.
만약 input에 쓰인 데이터가 데이터베이스에 없다면, 데이터베이스의 가장 가까운 날짜를 사용해야 합니다. 더 lower한 날짜를 (upper한 날짜가 아님) 사용함을 유의하십시오.
** lower 날짜 : 그 날짜 이전의 가장 가까운 날짜
아래는 프로그램 사용 예시입니다.
$> ./btc
Error: could not open file.
$> ./btc input.txt
2011-01-03 => 3 = 0.9
2011-01-03 => 2 = 0.6
2011-01-03 => 1 = 0.3
2011-01-03 => 1.2 = 0.36
2011-01-09 => 1 = 0.32
Error: not a positive number.
Error: bad input => 2001-42-42
2012-01-11 => 1 = 7.1
Error: too large a number.
$>
경고 : 이 프로젝트에서 사용한 컨테이너는 더이상 사용할 수 없습니다.
EX01 : 역폴란드 표기법
제출파일 : Makefile, main.cpp, RPN.cpp, RPN.hpp
아래 사항을 만족하는 프로그램을 작성하라:
프로그램명은 RPN
프로그램은 인자로 후위표기법 표현을 받는다.
이 연산 및 전달된 인자에서 사용되는 숫자는 10보다 적다. 계산 그자체와 결과는 이 규칙에 포함되지 않는다.
연산의 결과를 표준 출력에 정확하게 내보내야 한다.
프로그램 실행중 오류가 발생 시 표준출력에 오류 메시지를 출력해야 한다.
아래와 같은 토큰에 대한 연산을 다룰 수 있어야 한다. “+ - / *”
최소한 하나 이상의 컨테이너를 사용해야 한다.
괄호 혹은 소수를 처리할 필요는 없다.
아래는 실행 예시이다.
$> ./RPN "8 9 * 9 - 9 - 9 - 4 - 1 +"
42
$> ./RPN "7 7 * 7 -"
42
$> ./RPN "1 2 * 2 / 2 * 2 4 - +"
0
$> ./RPN "(1 + 1)"
Error
$>
경고 : 이전 exercise에서 사용한 컨테이너는 사용이 금지되고, 이번 exercise에서 사용한 컨테이너는 다음 exercise에서 사용이 금지된다.
EX02: PmergeMe
제출 파일 : Makefile, main.cpp, PmergeMe.cpp PmergeMe.hpp
아래 요구사항을 만족하는 프로그램을 작성하라.
프로그램 이름은 PmergeMe
프로그램은 양의 정수 시퀸스를 인자로 받아야 한다.
프로그램은 merge-insert 정렬 알고리즘을 사용하여 양의 정수 시퀸스를 정렬한다.
프로그램 실행 중 오류가 발생하면, 예외 메시지를 표준출력에 보여준다.
두 개의 다른 컨테이너를 사용해야 합니다. 프로그램은 최소한 3000개 이상의 서로다른 정수를 처리할 수 있어야 합니다.
각 컨테이너별 알고리즘을 보충하는걸 강력히 권장하고, 따라서 generic 함수를 사용하는걸 피하는게 권장됩니다.
아래는 한줄 한줄 출력해줘야 할 정보의 추가적인 가이드라인입니다.
첫번째 줄에는 정렬되지 않는 양의 정수 시퀸스를 명시적으로 보여줘야 합니다.
두번째 줄에는 정렬된 양의 정수 시퀸스를 출력해야 합니다.
세번째 줄에는 첫번째 컨테이너가 정렬하는데 사용한 시간을 출력해줘야 합니다.
네번째 줄에는 두번째 컨테이너가 정렬하는데 사용한 시간을 출력해줘야 합니다.
시간 출력 형식은 자유지만, 두 컨테이너 사이의 시간 차이를 확실하게 볼 수 있을 만큼 정밀하게 출력해야 합니다.
아래는 실행 예시입니다.
$> ./PmergeMe 3 5 9 7 4
Before: 3 5 9 7 4
After: 3 4 5 7 9
Time to process a range of 5 elements with std::[..] : 0.00031 us
Time to process a range of 5 elements with std::[..] : 0.00014 us
$> ./PmergeMe `shuf -i 1-100000 -n 3000 | tr "\\n" " "`
Before: 141 79 526 321 [...]
After: 79 141 321 526 [...]
Time to process a range of 3000 elements with std::[..] : 62.14389 us
Time to process a range of 3000 elements with std::[..] : 69.27212 us
$> ./PmergeMe "-1" "2"
Error
$> # For OSX USER:
$> ./PmergeMe `jot -r 3000 1 100000 | tr '\\n' ' '`
[...]
이 예제에서 시간 표시는 고의적으로 이상하게 되어있고, 당연히 모든 작업을 수행하는 데 걸린 시간을 표시해야 한다.
정렬 부분과 데이터 관리 부분 모두 포함된다.
중복에 대한 예외처리는 재량입니다.
